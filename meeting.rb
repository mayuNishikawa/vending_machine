class Drink
  attr_accessor :name, :price, :stock

  def initialize(name, price)
    @name = cola
    @price = 120
    @stock = 5
  end
end

drink = Drink.new("cola", 120)
drink.name => NoMethodErrorが帰ってくる
drink.name          => cola #①の結果(定義してなかったら、NoMethodErrorが帰ってくる)
drink.stock -= 1  => 4 #②の結果(定義してなかったら、NoMethodErrorが帰ってくる)

【課題要件】
  # ステップ１　扱えないお金
    # 想定外のもの（硬貨：１円玉、５円玉。お札：千円札以外のお札）が投入された場合は、投入金額に加算せず、それをそのまま釣り銭としてユーザに出力する。
  # ステップ２　ジュースの管理
    # 値段と名前の属性からなるジュースを１種類格納できる。初期状態で、コーラ（値段:120円、名前”コーラ”）を5本格納している。
    # 格納されているジュースの情報（値段と名前と在庫）を取得できる。
    注意：責務を持ちすぎていませんか？責任を持ちすぎていたら分割しましょう
  ステップ３　購入
    投入金額、在庫の点で、コーラが購入できるかどうかを取得できる。
    ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、ジュースの在庫を減らし、売り上げ金額を増やす。
    投入金額が足りない場合もしくは在庫がない場合、購入操作を行っても何もしない。
    現在の売上金額を取得できる。
    払い戻し操作では現在の投入金額からジュース購入金額を引いた釣り銭を出力する。
    注意：責務が集中していませんか？責務が多すぎると思ったら分けてみましょう
  # ステップ４　機能拡張
    # ジュースを3種類管理できるようにする。
    # 在庫にレッドブル（値段:200円、名前”レッドブル”）5本を追加する。
    # 在庫に水（値段:100円、名前”水”）5本を追加する。
    # 投入金額、在庫の点で購入可能なドリンクのリストを取得できる。
  ステップ５　釣り銭と売り上げ管理
    ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、釣り銭（投入金額とジュース値段の差分）を出力する。
    ジュースと投入金額が同じ場合、つまり、釣り銭0円の場合も、釣り銭0円と出力する。
    釣り銭の硬貨の種類は考慮しなくてよい。


class VendingMachineを作成→self.startメソッド(クラスメソッド)を作成→VendingMachine.startでプログラム実行

【対話式プロセス(VendingMachineクラスself.startメソッドの内容)】
# ~商品の選択と投入金額の管理~
・お金を投入させて値を取得 #①
・投入金額を計算 = slot_money.calculation(取得した値が引数) #②
・投入金額を表示 → slot_money.nowを使用 #③
・投入金額と在庫に応じて商品を表示 →display.can_buy #④
・ユーザーに購入する商品を選ばせる #⑤
・払い戻しがあれば投入金額を返す →後置ifを使用してslot_money.repayment　#どのタイミングでこれを書けばいい？
# ~購入~
・購入できれば在庫-1, 売上+料金、出来なければ何もしないa　#クラス分けすべし？？ purchase.completed_or_not
・払い戻しがあれば投入金額-料金
# ~釣り銭と売上管理~
・投入金額 > 料金ならば、差額を売上金から返却する



【クラス分けで生じた疑問】
・Purchaseクラスを2つにわける???????????????
  ①売上金とお釣りを管理するRegisterクラス
  ②購入出来るかの判断と在庫管理だけをするクラス

  支払い方法がキャッシュレスに対応した場合等を考慮して考えよう

・Drinkクラスを読み書きクラスに変えて、water, cola, redbullクラスの代わりにStockクラスを作る?????????
  → product = {}
    products = []
    drink = Drink.new 
    drink.name = ""
    drink.price =
    drink.stock =
    product = {name: drink.name, price: drink.price, stock: drink.stock}
    products << product

    のみもの多くなったり、温かいもの冷たいもの出てきたりした時に対応出来るかを論点に考えよう

・てかこれちゃんと動く??????????????????

自動販売機→　飲み物、お釣り(払い戻し)


【Purchase相談】
Purchaseクラスを2つにわける？
①売上金とお釣りを管理するRegisterクラス
②購入出来るかの判断と在庫管理だけをするクラス


購入
投入金額、在庫の点で、コーラが購入できるかどうかを取得できる。
  ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、ジュースの在庫を減らし、売り上げ金額を増やす。
  投入金額が足りない場合もしくは在庫がない場合、購入操作を行っても何もしない。
現在の売上金額を取得できる。

払い戻し操作では現在の投入金額からジュース購入金額を引いた釣り銭を出力する。
ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、釣り銭（投入金額とジュース値段の差分）を出力する。
ジュースと投入金額が同じ場合、つまり、釣り銭0円の場合も、釣り銭0円と出力する。
釣り銭の硬貨の種類は考慮しなくてよい。



データとそれに関わる処理に注目してクラス分けしていく
true・falseを返すメソッド名には？をつける
